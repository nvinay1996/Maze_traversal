#ifndef PA03_H
#define PA03_H 

#define WALL 'X'
#define PATH ' '
#define VISITED '.'

#include <stdio.h>

/* a structure for storing a maze                         */
/* int nrow: number of rows in the maze                   */  
/* int ncol: number of columns in the maze                */
/* char **maze: a two-dimensional array to store the maze */ 
/* Note that the ncol should not count '\n', even if your */
/* implementation stores '\n' in maze_array               */
/* In other words, nrow and ncol account for only         */
/* characters that correspond to WALL or PATH             */

typedef struct _Maze {
   int nrow;
   int ncol;
   char **maze_array;  
} Maze;

/* structure for coordinates */
/* row and col should refer to the (row,col) location in a maze */

typedef struct _Coord {
   int row;
   int col;
} Coord;

/* Details of the function can be found in README                        */
/* this function expects four parameters: two filenames, and coordinates */
/* of two locations                                                      */
/* two filenames: first one is a given maze, the second one is to        */
/* be written with the directions                                        */
/* coordinates of two locations: source and destination locations        */
/*                                                                       */
/* If the maze file does not exist, you should immediately return -1 and */
/* do nothing else, i.e., the direction file should not be created       */
/* If the maze file cannot be read into a Maze structure, you should     */
/* immediately return -1 and do nothing else                             */
/* If the coordinates are not valid, do nothing and return -1            */
/* If the directions file cannot be opened for writing, return -1        */
/* The function should write the directions of a shortest path from the  */
/* source location to the destination location into the directions file  */
/* the directions are in the form of a series of characters              */
/* 'N', 'S', 'E', 'W', without spacing (and without the quotes).         */
/* There should be just a single line, without a terminating newline     */
/* character. In other words, to the vi editor, it is an incomplete file */
/* The directions should allow an agent to travel in the maze from the   */
/* source coordinates to the destination coordinates using the fewest    */
/* number of moves                                                       */
/* the number of moves taken by the agent in a shortest path should be   */
/* returned                                                              */
/* Note that the maze can be generated by amaze, or some combinations of */
/* the maze expansion functions that you have written in PE08            */
/* you may assume that the maze file, if it exists, is in the correct    */
/* format                                                                */

int DFS_shortest_path_directions(char *mazefile, char *directionfile,
                        Coord source, Coord destination)
		 	__attribute__((nonnull));

/* Details of the function can be found in README                        */
/* this function expects 5 parameters: 3 filenames, and coordinates of   */
/* the source and destination locations                                  */
/* three filenames: first one is a given maze, the second one is a       */
/* directions file (a series of characters 'N', 'S', 'E', 'W'), you are  */
/* to simulate the movement of agent according to the directions         */
/* given in the direction files. The maze showing the locations that the */
/* agent has visited will be stored in the third file.                   */
/* the source and destination coordinates are the starting and end points*/
/* of the agent's path in the maze                                       */
/*                                                                       */
/* If the maze file does not exist, you should immediately return -1 and */
/* do nothing else                                                       */
/* If the maze file cannot be read into a Maze structure, you should     */
/* immediately return -1 and do nothing else                             */
/* If the direction file does not exist, you should immediately return   */
/* -1 and do nothing else                                                */
/* if the coordinates are not valid, you should immediately return -1    */
/* and do nothing else                                                   */
/* Otherwise, it means that the agent has been airdropped to the starting*/
/* and the starting location has been visited                            */
/* You should simulate until you reach the end of file of the direction  */
/* file or encounter an invalid direction                                */
/* you should print the visited maze into the third given filename, the  */
/* visitedfile, with visited locations represented by '.'                */
/* if you encounter an invalid direction (wrong character, try to visit  */
/* a location with WALL, try to visit a location again, try to move the  */
/* agent out of bound), you should return -1                             */
/* do not change a location with WALL to a VISITED location              */
/* If the agent successfully reach the final destination with valid      */
/* directions in the direction file, and the visited maze can be output  */
/* properly, you should return the number of visited locations,          */
/* otherwise, return -1                                                  */
/* you may assume that the maze file, if it exists, is in correct format */

int Simulate_movement(char *mazefile, char *directionfile, char *visitedfile,
                      Coord source, Coord destination)
			__attribute__((nonnull));

#endif
